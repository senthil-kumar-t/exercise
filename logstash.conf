input {
     beats {
       port => 5044
       host => "0.0.0.0"
       client_inactivity_timeout => 300
     }
}

filter {
  if ([fields][log_type] == "apigee-nginx-access" and [fields][env] != "sandbox") {
	grok {
	  patterns_dir => ["/etc/logstash/patterns"]
          match => { "message" => [ "%{APIGEE_NGINX_ACCESS_FAILURE1}" , "%{APIGEE_NGINX_ACCESS_FAILURE2}" , "%{APIGEE_NGINX_ACCESS_SUCCESS}"] }
          remove_field => ["message" , "port"]
        }
        mutate {
	  add_field => { "index_name" => "%{organization}-%{[fields][index]}" }
	}
  } else if ([fields][log_type] == "apigee-nginx-access" and [fields][env] == "sandbox") {
	 grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => { "message" => [ "%{APIGEE_NGINX_ACCESS_FAILURE1}" , "%{APIGEE_NGINX_ACCESS_FAILURE2}" , "%{APIGEE_NGINX_ACCESS_SUCCESS}"] }
          remove_field => ["message" , "port"]
        }
        mutate {
          add_field => { "index_name" => "%{environment}-%{[fields][index]}" }
        }
  } else if ([fields][log_type] == "apigee-system") {
	grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:log_message}" }
        }
        mutate {
	  add_field => { "index_name" => "%{[fields][index]}" }
	}
  } else if ([fields][log_type] == "apigee-generic") {
        mutate {
	  add_field => { "index_name" => "%{[fields][index]}" }
	}
  } else if ([fields][log_type] == "apigee-system-mp") {
        grok {
	  match => {"message" => "%{GREEDYDATA} org:%{HOSTNAME:org} %{GREEDYDATA}"}
	}
        mutate {
	  add_field => { "index_name" => "%{org}-%{[fields][index]}" }
	}
  } else if ([fields][log_type] == "apigee-mp-metrics" ) {
	grok {
	  patterns_dir => ["/etc/logstash/patterns"]
	  match => { "message" => [ "%{APIGEE_MP_PROXY_METRIC}", "%{APIGEE_MP_HEAP_METRIC}", "%{APIGEE_MP_THREAD_METRIC}", "%{APIGEE_MP_NIO_METRIC}", "%{APIGEE_MP_FAULT_METRIC}", "%{APIGEE_MP_TARGET_METRIC}",  "%{APIGEE_MP_HEARTBEAT_METRIC}"] }
	}
        mutate {
	  add_field => { "index_name" => "%{[fields][index]}" }
	}
  } else if([fields][log_type] == "apigee-mgmt-access") {
        grok {
	  match => {"message" => "%{GREEDYDATA}OrganizationName=%{HOSTNAME:org},%{GREEDYDATA}"}
	}

        mutate {
	  add_field => { "index_name" => "%{org}-%{[fields][index]}" }
	}
  } else if ([fields][log_type] == "apigee-router-metrics" ) {
	grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => { "message" => [ "%{APIGEE_ROUTER_VHOST_METRIC}", "%{APIGEE_ROUTER_HEARTBEAT_METRIC}" ] }
        }
        mutate {
          add_field => { "index_name" => "%{[fields][index]}" }
        }
  } else if ([fields][log_type] == "apigee-qpid-metrics" ) {
	grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => { "message" => "%{APIGEE_QPID_METRIC}" }
        }
        mutate {
          add_field => { "index_name" => "%{[fields][index]}" }
        }
  } else if ([fields][log_type] == "apigee-oldap-metrics" ) {
	grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => { "message" => "%{APIGEE_LDAP_METRIC}" }
        }
        kv {
	  source => "stats"
          field_split_pattern => "i,"
          value_split => "="
        }
        mutate {
          add_field => { "index_name" => "%{[fields][index]}" }
          convert => {
	          "threads_open"  => "integer"
        	  "threads_active" => "integer"
	          "threads_backload" => "integer"
        	  "threads_pending" => "integer"
		  "threads_starting" => "integer"
                  "waiters_read" => "integer"
                  "waiters_write" => "integer"
                  "statistics_pdu" => "integer"
                  "statistics_entries" => "integer"
                  "statistics_referrals" => "integer"
                  "statistics_bytes" => "integer"
                  "connections_current" => "integer"
                  "operations_delete_completed" => "integer"
          }
	  remove_field => ["message" , "stats", "threads_max_pending", "operations_unbind_initiated", "operations_unbind_initiated" ] 
        }
  } else {
 	 grok {
	    match => { "message" => "%{COMBINEDAPACHELOG}" }
  	}
	  date {
	    match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
	  }
	  geoip {
	     source => "clientip"
	  }
	  useragent
	        {
	      source => "agent"
	      target => "useragent"
	  }
	  mutate {
		add_field => { "index_name" => "azap-jira-production-apache" }
	  }
  }
}


output {
     elasticsearch {
         hosts => ['10.186.13.137:9200','10.186.13.138:9200','10.186.13.139:9200']
         index => "%{index_name}-%{+YYYY.MM.dd}"
         user => "elastic"
         password => "admin123"
     }
     stdout {codec => rubydebug }
}

